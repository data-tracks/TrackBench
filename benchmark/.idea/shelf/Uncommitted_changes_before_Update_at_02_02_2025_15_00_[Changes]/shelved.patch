Index: src/main/java/dev/trackbench/system/kafka/KafkaTools/TypeSplitter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dev.trackbench.system.kafka.KafkaTools;\r\n\r\nimport com.fasterxml.jackson.databind.JsonNode;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.apache.kafka.clients.admin.AdminClient;\r\nimport org.apache.kafka.clients.admin.NewTopic;\r\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\r\nimport org.apache.kafka.clients.producer.KafkaProducer;\r\nimport org.apache.kafka.clients.producer.Producer;\r\nimport org.apache.kafka.clients.producer.ProducerRecord;\r\nimport org.apache.kafka.common.serialization.Serdes;\r\nimport org.apache.kafka.streams.KafkaStreams;\r\nimport org.apache.kafka.streams.StreamsBuilder;\r\nimport org.apache.kafka.streams.StreamsConfig;\r\nimport org.apache.kafka.streams.kstream.KStream;\r\n\r\nimport java.util.*;\r\n\r\n@Slf4j\r\npublic class TypeSplitter {\r\n\r\n    private static final Set<String> existingTopics = new HashSet<>();\r\n    static Properties props = new Properties();\r\n    static Properties producerProps = new Properties();\r\n    static Producer<String, String> producer;\r\n    static String inputTopic = \"input\";\r\n    static String outputTopic = \"output\";\r\n    static String errorTopic = \"error\";\r\n    static ObjectMapper mapper = new ObjectMapper();\r\n\r\n    //TODO: use this HashMap\r\n    static Map<String, List<String>> keywords = new HashMap<>();\r\n\r\n\r\n    public static void getProps(Properties props) {\r\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\r\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\r\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\r\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"latest\");\r\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\r\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, StreamsConfig.EXACTLY_ONCE); // Ensure exactly-once semantics\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"spliter-data-app\");\r\n        getProps(props);\r\n\r\n        //TODO: add format file here using the HashMap\r\n\r\n        // Configure producer\r\n        producerProps.put(\"bootstrap.servers\", \"localhost:9092\");\r\n        producerProps.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\r\n        producerProps.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\r\n        producerProps.put(\"acks\", \"all\");  // Ensure that all replicas acknowledge the message\r\n        producerProps.put(\"retries\", 3);   // Retry on failure\r\n        producerProps.put(\"enable.idempotence\", \"true\");\r\n\r\n        // Initialize the producer once\r\n        producer = new KafkaProducer<>(producerProps);\r\n\r\n        StreamsBuilder builder = new StreamsBuilder();\r\n\r\n        KStream<String, String> sensorStream = builder.stream(inputTopic);\r\n\r\n        // Ensure the input topic exists before processing\r\n        checkAndCreateTopic(inputTopic);\r\n\r\n        // Process the sensor data and send it to the appropriate topic\r\n        sensorStream.foreach((key, value) -> {\r\n            try {\r\n                JsonNode node = mapper.readTree(value);\r\n                JsonNode data = node.get(\"data\");\r\n                String topicType = data.get(\"type\").asText();\r\n                String id = data.get(\"id\").asText();\r\n\r\n                // send all messages as is through the systems output\r\n                producer.send(new ProducerRecord<>(outputTopic, id, value), (metadata, exception) -> {\r\n                    if (exception != null) {\r\n                        System.err.println(\"Failed to send message: \" + exception.getMessage());\r\n                        // Optionally, handle the failure (e.g., retry logic)\r\n                    } else {\r\n                        log.info(\"Message sent to topic \" + topicType + \": \" + value);\r\n                    }\r\n                });\r\n\r\n                if (!node.has(\"data\") || data.has(\"Error\")) {\r\n                    System.err.println(\"Invalid message format: 'data' field missing or Error. Sending message to errors: \" + value);\r\n                    producer.send(new ProducerRecord<>(errorTopic, id, value), (metadata, exception) -> {\r\n                        if (exception != null) {\r\n                            System.err.println(\"Failed to send message: \" + exception.getMessage());\r\n                            // Optionally, handle the failure (e.g., retry logic)\r\n                        } else {\r\n                            log.info(\"Message sent to topic \" + topicType + \": \" + value);\r\n                        }\r\n                    });\r\n                    return;\r\n                }\r\n\r\n                // check the entries of their format\r\n                if (!checkFormat(node)) {\r\n                    System.err.println(\"Invalid message format: 'data' field missing or Error. Sending message to errors: \" + value);\r\n                    producer.send(new ProducerRecord<>(errorTopic, id, value), (metadata, exception) -> {\r\n                        if (exception != null) {\r\n                            System.err.println(\"Failed to send message: \" + exception.getMessage());\r\n                            // Optionally, handle the failure (e.g., retry logic)\r\n                        } else {\r\n                            log.info(\"Message sent to topic \" + topicType + \": \" + value);\r\n                        }\r\n                    });\r\n                    return;\r\n                }\r\n\r\n                // Send the message to the appropriate topic\r\n                producer.send(new ProducerRecord<>(topicType, id, value), (metadata, exception) -> {\r\n                    if (exception != null) {\r\n                        System.err.println(\"Failed to send message: \" + exception.getMessage());\r\n                        // Optionally, handle the failure (e.g., retry logic)\r\n                    } else {\r\n                        log.info(\"Message sent to topic \" + topicType + \": \" + value);\r\n                    }\r\n                });\r\n\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        });\r\n\r\n        // Start the Kafka Streams application\r\n        KafkaStreams streams = new KafkaStreams(builder.build(), props);\r\n        streams.start();\r\n\r\n        // Graceful shutdown\r\n        Runtime.getRuntime().addShutdownHook(new Thread(streams::close));\r\n    }\r\n\r\n    private static boolean checkFormat(JsonNode node) {\r\n        boolean format = true;\r\n        if(keywords.containsKey(node.get(\"type\").asText())) {\r\n            List<String> list = keywords.get(node.get(\"type\").asText());\r\n            for(String str : list) {\r\n                if(!node.has(str)) {\r\n                    format = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return format;\r\n    }\r\n\r\n    /**\r\n     * Check if the given topic exists. If not, create it.\r\n     *\r\n     * @param topic The name of the topic.\r\n     */\r\n    public static void checkAndCreateTopic(String topic) {\r\n        if (!existingTopics.contains(topic)) {\r\n            try (AdminClient adminClient = AdminClient.create(props)) {\r\n                // Check if the topic exists\r\n                if (!adminClient.listTopics().names().get().contains(topic)) {\r\n                    // If not, create the topic\r\n                    NewTopic newTopic = new NewTopic(topic, 1, (short) 1); // 1 partition, 1 replica\r\n                    adminClient.createTopics(Collections.singleton(newTopic));\r\n                    existingTopics.add(topic);\r\n                    log.info(\"Topic created: \" + topic);\r\n                }\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/trackbench/system/kafka/KafkaTools/TypeSplitter.java b/src/main/java/dev/trackbench/system/kafka/KafkaTools/TypeSplitter.java
--- a/src/main/java/dev/trackbench/system/kafka/KafkaTools/TypeSplitter.java	(revision e837cb2bec2706ceed7f21baacecc6a7aefc9f12)
+++ b/src/main/java/dev/trackbench/system/kafka/KafkaTools/TypeSplitter.java	(date 1738258459400)
@@ -80,7 +80,7 @@
                         System.err.println("Failed to send message: " + exception.getMessage());
                         // Optionally, handle the failure (e.g., retry logic)
                     } else {
-                        log.info("Message sent to topic " + topicType + ": " + value);
+                        log.info("Message sent to output: " + value);
                     }
                 });
 
@@ -91,7 +91,7 @@
                             System.err.println("Failed to send message: " + exception.getMessage());
                             // Optionally, handle the failure (e.g., retry logic)
                         } else {
-                            log.info("Message sent to topic " + topicType + ": " + value);
+                            log.info("Message sent to errorTopic: " + value);
                         }
                     });
                     return;
@@ -105,7 +105,7 @@
                             System.err.println("Failed to send message: " + exception.getMessage());
                             // Optionally, handle the failure (e.g., retry logic)
                         } else {
-                            log.info("Message sent to topic " + topicType + ": " + value);
+                            log.info("Message sent to errorTopic due to wrong format: " + value);
                         }
                     });
                     return;
@@ -121,6 +121,9 @@
                     }
                 });
 
+                //TODO: add sender to group topics
+                
+
             } catch (Exception e) {
                 e.printStackTrace();
             }
Index: src/main/java/dev/trackbench/system/kafka/KafkaTools/FuelPump.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dev.trackbench.system.kafka.KafkaTools;\r\n\r\n\r\nimport dev.trackbench.system.kafka.AverageClass.AverageFuelPump;\r\nimport dev.trackbench.system.kafka.JsonClass.JsonFuelPump;\r\nimport dev.trackbench.system.kafka.Serde.AverageFuelPumpSerde;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\r\nimport org.apache.kafka.clients.producer.KafkaProducer;\r\nimport org.apache.kafka.clients.producer.Producer;\r\nimport org.apache.kafka.clients.producer.ProducerRecord;\r\nimport org.apache.kafka.common.serialization.Serdes;\r\nimport org.apache.kafka.streams.KafkaStreams;\r\nimport org.apache.kafka.streams.StreamsBuilder;\r\nimport org.apache.kafka.streams.StreamsConfig;\r\nimport org.apache.kafka.streams.kstream.*;\r\nimport org.json.JSONObject;\r\n\r\nimport java.time.Duration;\r\nimport java.util.Properties;\r\n\r\n@Slf4j\r\npublic class FuelPump {\r\n\r\n    static Properties props = new Properties();\r\n    static Properties producerProps = new Properties();\r\n    static Producer<String, String> producer;\r\n    static long windowSize = 1000;\r\n    static long advanceBy = 250;\r\n\r\n    public static void getProps(Properties props) {\r\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\r\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\r\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\r\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"latest\");\r\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\r\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, StreamsConfig.EXACTLY_ONCE); // Ensure exactly-once semantics\r\n//        props.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, 4);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"fuelPump-app\");\r\n        getProps(props);\r\n\r\n        // Configure producer\r\n        producerProps.put(\"bootstrap.servers\", \"localhost:9092\");\r\n        producerProps.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\r\n        producerProps.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\r\n        producerProps.put(\"acks\", \"all\");  // Ensure that all replicas acknowledge the message\r\n        producerProps.put(\"retries\", 3);   // Retry on failure\r\n        producerProps.put(\"enable.idempotence\", \"true\");\r\n\r\n\r\n        // Initialize the producer once\r\n        producer = new KafkaProducer<>(producerProps);\r\n\r\n        try {\r\n            StreamsBuilder builder = new StreamsBuilder();\r\n            String inputTopic = \"fuelPump\";\r\n            String outputTopic = \"f3\";\r\n            KStream<String, String> sensorStream = builder.stream(inputTopic);\r\n\r\n//            sensorStream.foreach((key, value) -> {\r\n//                log.info(\"Key: \" + key + \" Value: \" + value);\r\n//            });\r\n\r\n            KTable<Windowed<String>, AverageFuelPump> aggregatedStream = sensorStream\r\n                    .groupBy((key, value) -> {\r\n//                        log.info(\"Key :\" + key + \" Value :\" + value);\r\n                        return key;\r\n                    })\r\n                    .windowedBy(TimeWindows.of(Duration.ofMillis(windowSize)).grace(Duration.ofMillis(0)).advanceBy(Duration.ofMillis(advanceBy)))\r\n                    .aggregate(() -> new AverageFuelPump(0, 0, 0, 0, 0, -1), (key, value, agg) -> {\r\n                        JsonFuelPump entry = new JsonFuelPump(value);\r\n                        if(!entry.error) {\r\n                            agg.count += 1;\r\n                            agg.temp += entry.temp;\r\n                            agg.flowRate += entry.flowRate;\r\n                            if(agg.tickEnd < entry.tick) {\r\n                                agg.tickEnd = entry.tick;\r\n                            }\r\n                            if(agg.id == -1) {\r\n                                agg.id = entry.id;\r\n                                agg.tickStart = entry.tick;\r\n                            }\r\n                        }\r\n                        return agg;\r\n                    }, Materialized.with(Serdes.String(), new AverageFuelPumpSerde()))\r\n                    ;//.suppress(Suppressed.untilWindowCloses(Suppressed.BufferConfig.unbounded()));\r\n\r\n            aggregatedStream\r\n                    .toStream()\r\n//                    .filter((key, value) -> {\r\n//                        long windowEnd = key.window().end();\r\n//                        return value.getTickEnd() >= windowEnd;\r\n//                    })\r\n                    .foreach((key, value) -> {\r\n\r\n                        double[] average = value.getAverage();\r\n\r\n//                        String message = \"AverageTire Temp: \" + average[0] + \" AverageTire Pressure: \" + average[1] + \" Count: \" + value.getCount();\r\n                        JSONObject data = new JSONObject();\r\n                        data.put(\"averageTemp\", average[0]);\r\n                        data.put(\"averageFlowRate\", average[1]);\r\n                        data.put(\"id\", value.getId());\r\n                        data.put(\"type\", \"fuelPump\");\r\n\r\n                        JSONObject json = new JSONObject();\r\n                        json.put(\"startTime\", value.getTickStart());\r\n                        json.put(\"endTime\", value.getTickEnd());\r\n                        json.put(\"data\", data);\r\n\r\n                        String jsonMessage = json.toString();\r\n\r\n                        log.info(\"Message: \" + jsonMessage);\r\n                        producer.send(new ProducerRecord<>(outputTopic, \"0\", jsonMessage), (metadata, exception) -> {\r\n                            if (exception != null) {\r\n                                System.err.println(\"Failed to send message: \" + exception.getMessage());\r\n                                // Optionally, handle the failure (e.g., retry logic)\r\n                            }\r\n//                            else {\r\n//                                log.info(\"Message sent to topic \" + outputTopic + \": AverageTire Temp\" + average[0] + \" AverageTire Pressure\" + average[1]);\r\n//                            }\r\n                        });\r\n                    });\r\n\r\n            // Start the Kafka Streams application\r\n            KafkaStreams streams = new KafkaStreams(builder.build(), props);\r\n            streams.cleanUp();\r\n            streams.start();\r\n\r\n            // Graceful shutdown\r\n            Runtime.getRuntime().addShutdownHook(new Thread(() -> {\r\n            try{\r\n                producer.flush();\r\n                streams.close();\r\n            } finally {\r\n                log.info(\"Shutting down\");\r\n            }\r\n            }));\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/trackbench/system/kafka/KafkaTools/FuelPump.java b/src/main/java/dev/trackbench/system/kafka/KafkaTools/FuelPump.java
--- a/src/main/java/dev/trackbench/system/kafka/KafkaTools/FuelPump.java	(revision e837cb2bec2706ceed7f21baacecc6a7aefc9f12)
+++ b/src/main/java/dev/trackbench/system/kafka/KafkaTools/FuelPump.java	(date 1738256703768)
@@ -57,7 +57,7 @@
         try {
             StreamsBuilder builder = new StreamsBuilder();
             String inputTopic = "fuelPump";
-            String outputTopic = "f3";
+            String outputTopic = "output";
             KStream<String, String> sensorStream = builder.stream(inputTopic);
 
 //            sensorStream.foreach((key, value) -> {
Index: src/main/java/dev/trackbench/system/kafka/KafkaTools/Heat.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dev.trackbench.system.kafka.KafkaTools;\r\n\r\n\r\nimport dev.trackbench.system.kafka.AverageClass.AverageHeat;\r\nimport dev.trackbench.system.kafka.JsonClass.JsonHeat;\r\nimport dev.trackbench.system.kafka.Serde.AverageHeatSerde;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\r\nimport org.apache.kafka.clients.producer.KafkaProducer;\r\nimport org.apache.kafka.clients.producer.Producer;\r\nimport org.apache.kafka.clients.producer.ProducerRecord;\r\nimport org.apache.kafka.common.serialization.Serdes;\r\nimport org.apache.kafka.streams.KafkaStreams;\r\nimport org.apache.kafka.streams.StreamsBuilder;\r\nimport org.apache.kafka.streams.StreamsConfig;\r\nimport org.apache.kafka.streams.kstream.*;\r\nimport org.json.JSONObject;\r\n\r\nimport java.time.Duration;\r\nimport java.util.Properties;\r\n\r\n@Slf4j\r\npublic class Heat {\r\n\r\n    static Properties props = new Properties();\r\n    static Properties producerProps = new Properties();\r\n    static Producer<String, String> producer;\r\n    static long windowSize = 1000;\r\n    static long advanceBy = 250;\r\n\r\n    public static void getProps(Properties props) {\r\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\r\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\r\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\r\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"latest\");\r\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG,0);\r\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, StreamsConfig.EXACTLY_ONCE); // Ensure exactly-once semantics\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"heat-app\");\r\n        getProps(props);\r\n\r\n        // Configure producer\r\n        producerProps.put(\"bootstrap.servers\", \"localhost:9092\");\r\n        producerProps.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\r\n        producerProps.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\r\n        producerProps.put(\"acks\", \"all\");  // Ensure that all replicas acknowledge the message\r\n        producerProps.put(\"retries\", 3);   // Retry on failure\r\n        producerProps.put(\"enable.idempotence\", \"true\");\r\n\r\n\r\n        // Initialize the producer once\r\n        producer = new KafkaProducer<>(producerProps);\r\n\r\n        try {\r\n            StreamsBuilder builder = new StreamsBuilder();\r\n            String inputTopic = \"heat\";\r\n            String outputTopic = \"f3\";\r\n            KStream<String, String> sensorStream = builder.stream(inputTopic);\r\n\r\n            KTable<Windowed<String>, AverageHeat> aggregatedStream = sensorStream\r\n                    .groupBy((key, value) -> {\r\n//                        log.info(\"Key :\" + key + \" Value :\" + value);\r\n                        return key;\r\n                    })\r\n                    .windowedBy(TimeWindows.of(Duration.ofMillis(windowSize)).grace(Duration.ofMillis(0)).advanceBy(Duration.ofMillis(advanceBy)))\r\n                    .aggregate(() -> new AverageHeat(0, 0, 0, 0, -1), (key, value, agg) -> {\r\n                        JsonHeat entry = new JsonHeat(value);\r\n                        if(!entry.error) {\r\n                            agg.count += 1;\r\n                            agg.temp += entry.temp;\r\n                            if(agg.tickEnd < entry.tick) {\r\n                                agg.tickEnd = entry.tick;\r\n                            }\r\n                            if(agg.id == -1) {\r\n                                agg.id = entry.id;\r\n                                agg.tickStart = entry.tick;\r\n                            }\r\n                        }\r\n                        return agg;\r\n                    }, Materialized.with(Serdes.String(), new AverageHeatSerde()))\r\n                    ;\r\n\r\n            aggregatedStream\r\n                    .toStream()\r\n                    .foreach((key, value) -> {\r\n\r\n                        double average = value.getAverage();\r\n\r\n//                        String message = \"AverageTire Temp: \" + average[0] + \" AverageTire Pressure: \" + average[1] + \" Count: \" + value.getCount();\r\n                        JSONObject data = new JSONObject();\r\n                        data.put(\"averageTemp\", average);\r\n                        data.put(\"id\", value.getId());\r\n                        data.put(\"type\", \"heat\");\r\n\r\n                        JSONObject json = new JSONObject();\r\n                        json.put(\"startTime\", value.getTickStart());\r\n                        json.put(\"endTime\", value.getTickEnd());\r\n                        json.put(\"data\", data);\r\n\r\n                        String jsonMessage = json.toString();\r\n\r\n                        log.info(\"Message: \" + jsonMessage);\r\n                        producer.send(new ProducerRecord<>(outputTopic, \"0\", jsonMessage), (metadata, exception) -> {\r\n                            if (exception != null) {\r\n                                System.err.println(\"Failed to send message: \" + exception.getMessage());\r\n                                // Optionally, handle the failure (e.g., retry logic)\r\n                            }\r\n//                            else {\r\n//                                log.info(\"Message sent to topic \" + outputTopic + \": AverageTire Temp\" + average[0] + \" AverageTire Pressure\" + average[1]);\r\n//                            }\r\n                        });\r\n                    });\r\n\r\n            // Start the Kafka Streams application\r\n            KafkaStreams streams = new KafkaStreams(builder.build(), props);\r\n            streams.cleanUp();\r\n            streams.start();\r\n\r\n            // Graceful shutdown\r\n            Runtime.getRuntime().addShutdownHook(new Thread(() -> {\r\n                try{\r\n                    producer.flush();\r\n                    streams.close();\r\n                } finally {\r\n                    log.info(\"Shutting down\");\r\n                }\r\n            }));\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/trackbench/system/kafka/KafkaTools/Heat.java b/src/main/java/dev/trackbench/system/kafka/KafkaTools/Heat.java
--- a/src/main/java/dev/trackbench/system/kafka/KafkaTools/Heat.java	(revision e837cb2bec2706ceed7f21baacecc6a7aefc9f12)
+++ b/src/main/java/dev/trackbench/system/kafka/KafkaTools/Heat.java	(date 1738256703701)
@@ -56,7 +56,7 @@
         try {
             StreamsBuilder builder = new StreamsBuilder();
             String inputTopic = "heat";
-            String outputTopic = "f3";
+            String outputTopic = "output";
             KStream<String, String> sensorStream = builder.stream(inputTopic);
 
             KTable<Windowed<String>, AverageHeat> aggregatedStream = sensorStream
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"6766ef58-934d-4558-973b-41fb2a72eadb\" name=\"Changes\" comment=\"added logic for defining fixed workloads and evaluation of results\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/dev/trackbench/system/kafka/KafkaTools/TypeSplitter.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/dev/trackbench/system/kafka/KafkaTools/TypeSplitter.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"ExternalProjectsManager\">\r\n    <system id=\"GRADLE\">\r\n      <state>\r\n        <task path=\"$PROJECT_DIR$\">\r\n          <activation />\r\n        </task>\r\n        <projects_view>\r\n          <tree_state>\r\n            <expand>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"benchmark\" type=\"f1a62948:ProjectNode\" />\r\n              </path>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"benchmark\" type=\"f1a62948:ProjectNode\" />\r\n                <item name=\"Tasks\" type=\"e4a08cd1:TasksNode\" />\r\n              </path>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"benchmark\" type=\"f1a62948:ProjectNode\" />\r\n                <item name=\"Tasks\" type=\"e4a08cd1:TasksNode\" />\r\n                <item name=\"application\" type=\"c8890929:TasksNode$1\" />\r\n              </path>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"benchmark\" type=\"f1a62948:ProjectNode\" />\r\n                <item name=\"Tasks\" type=\"e4a08cd1:TasksNode\" />\r\n                <item name=\"build\" type=\"c8890929:TasksNode$1\" />\r\n              </path>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"benchmark\" type=\"f1a62948:ProjectNode\" />\r\n                <item name=\"Dependencies\" type=\"6de06a37:ExternalSystemViewDefaultContributor$MyDependenciesNode\" />\r\n              </path>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"benchmark\" type=\"f1a62948:ProjectNode\" />\r\n                <item name=\"Dependencies\" type=\"6de06a37:ExternalSystemViewDefaultContributor$MyDependenciesNode\" />\r\n                <item name=\"compileClasspath\" type=\"62daadca:ExternalSystemViewDefaultContributor$DependencyScopeExternalSystemNode\" />\r\n              </path>\r\n            </expand>\r\n            <select />\r\n          </tree_state>\r\n        </projects_view>\r\n      </state>\r\n    </system>\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Interface\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/..\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;datomo&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\"><![CDATA[{\r\n  \"selectedUrlAndAccountId\": {\r\n    \"url\": \"https://github.com/data-tracks/TrackBench.git\",\r\n    \"accountId\": \"656552ee-c05f-441f-8b43-02e68d14bcc6\"\r\n  }\r\n}]]></component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 3\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2s7ApKsLK8hwn4MuBqXHtWMMsHa\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"1\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Gradle.benchmark [:dev.datageneration.Main.main()].executor\": \"Run\",\r\n    \"Gradle.benchmark [build].executor\": \"Run\",\r\n    \"Gradle.benchmark [run].executor\": \"Run\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"RunOnceActivity.git.unshallow\": \"true\",\r\n    \"git-widget-placeholder\": \"main\",\r\n    \"kotlin-language-version-configured\": \"true\",\r\n    \"last_opened_file_path\": \"C:/Users/danie/git/TrackBench/benchmark\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"project.structure.last.edited\": \"Modules\",\r\n    \"project.structure.proportion\": \"0.15\",\r\n    \"project.structure.side.proportion\": \"0.0\",\r\n    \"settings.editor.selected.configurable\": \"reference.settingsdialog.project.gradle\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveMembersDialog.RECENTS_KEY\">\r\n      <recent name=\"dev.trackbench.util.TimeUtils\" />\r\n    </key>\r\n    <key name=\"ExtractSuperBase.RECENT_KEYS\">\r\n      <recent name=\"dev.datageneration.window\" />\r\n    </key>\r\n    <key name=\"CopyClassDialog.RECENTS_KEY\">\r\n      <recent name=\"dev.datageneration.util\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Gradle.benchmark [run]\">\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"dev.trackbench.Main\" />\r\n      <module name=\"benchmark.main\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"dev.trackbench.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"benchmark [build]\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\"build\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>true</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <RunAsTest>false</RunAsTest>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"benchmark [run]\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\"run\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>true</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <RunAsTest>false</RunAsTest>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Gradle.benchmark [run]\" />\r\n        <item itemvalue=\"Gradle.benchmark [build]\" />\r\n        <item itemvalue=\"Application.Main\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-jdk-9823dce3aa75-b114ca120d71-intellij.indexing.shared.core-IU-242.21829.142\" />\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-7c0b70fcd90d-JavaScript-IU-242.21829.142\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"6766ef58-934d-4558-973b-41fb2a72eadb\" name=\"Changes\" comment=\"\" />\r\n      <created>1737796421007</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1737796421007</updated>\r\n      <workItem from=\"1737796422113\" duration=\"70000\" />\r\n      <workItem from=\"1737796501741\" duration=\"7440000\" />\r\n      <workItem from=\"1737884272059\" duration=\"11090000\" />\r\n      <workItem from=\"1737895502353\" duration=\"17232000\" />\r\n      <workItem from=\"1737966368208\" duration=\"16010000\" />\r\n      <workItem from=\"1738017400658\" duration=\"1426000\" />\r\n      <workItem from=\"1738018845573\" duration=\"251000\" />\r\n      <workItem from=\"1738019105581\" duration=\"95000\" />\r\n      <workItem from=\"1738077020355\" duration=\"10008000\" />\r\n      <workItem from=\"1738087119532\" duration=\"22200000\" />\r\n      <workItem from=\"1738254872096\" duration=\"799000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"moved to gradle, changed sensor design\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1737884652775</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1737884652775</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"moved to gradle, changed sensor design\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1737884718649</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1737884718649</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"generates data in parallel, fixed slow error generation\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1737908114667</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1737908114667</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"finished logic for building and evaluating complex workloads and processing steps\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1738088367297</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1738088367297</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"removed incorrectly tracked files\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1738134469220</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1738134469220</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"added delay calculator\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1738137646557</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1738137646557</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"added logic for defining fixed workloads and evaluation of results\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1738185178363</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1738185178363</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"8\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"moved to gradle, changed sensor design\" />\r\n    <MESSAGE value=\"generates data in parallel, fixed slow error generation\" />\r\n    <MESSAGE value=\"finished logic for building and evaluating complex workloads and processing steps\" />\r\n    <MESSAGE value=\"removed incorrectly tracked files\" />\r\n    <MESSAGE value=\"added delay calculator\" />\r\n    <MESSAGE value=\"added logic for defining fixed workloads and evaluation of results\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"added logic for defining fixed workloads and evaluation of results\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/dev/trackbench/simulation/aggregate/ErrorCreator.java</url>\r\n          <line>37</line>\r\n          <option name=\"timeStamp\" value=\"3\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/dev/trackbench/jsonHandler/JsonFileHandler.java</url>\r\n          <line>78</line>\r\n          <option name=\"timeStamp\" value=\"31\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/dev/trackbench/processing/ProcessingCoordinator.java</url>\r\n          <line>38</line>\r\n          <option name=\"timeStamp\" value=\"62\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/dev/trackbench/Main.java</url>\r\n          <line>66</line>\r\n          <option name=\"timeStamp\" value=\"63\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/dev/trackbench/simulation/processing/Filter.java</url>\r\n          <line>17</line>\r\n          <properties>\r\n            <option name=\"lambda-ordinal\" value=\"-1\" />\r\n          </properties>\r\n          <option name=\"timeStamp\" value=\"64\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/dev/trackbench/simulation/processing/Filter.java</url>\r\n          <line>17</line>\r\n          <properties>\r\n            <option name=\"lambda-ordinal\" value=\"0\" />\r\n          </properties>\r\n          <option name=\"timeStamp\" value=\"65\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/dev/trackbench/workloads/ErrorWorkload.java</url>\r\n          <line>20</line>\r\n          <option name=\"timeStamp\" value=\"67\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"java-method\">\r\n          <url>jar://$USER_HOME$/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.core/jackson-databind/2.18.2/deef8697b92141fb6caf7aa86966cff4eec9b04f/jackson-databind-2.18.2.jar!/com/fasterxml/jackson/databind/node/NumericNode.class</url>\r\n          <line>39</line>\r\n          <properties class=\"com.fasterxml.jackson.databind.node.NumericNode\" method=\"asText\">\r\n            <option name=\"EMULATED\" value=\"true\" />\r\n            <option name=\"WATCH_EXIT\" value=\"false\" />\r\n          </properties>\r\n          <option name=\"timeStamp\" value=\"19\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n    <pin-to-top-manager>\r\n      <pinned-members>\r\n        <PinnedItemInfo parentTag=\"com.fasterxml.jackson.databind.node.IntNode\" memberName=\"_value\" />\r\n      </pinned-members>\r\n    </pin-to-top-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision e837cb2bec2706ceed7f21baacecc6a7aefc9f12)
+++ b/.idea/workspace.xml	(date 1738504818090)
@@ -4,9 +4,17 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="6766ef58-934d-4558-973b-41fb2a72eadb" name="Changes" comment="added logic for defining fixed workloads and evaluation of results">
+    <list default="true" id="6766ef58-934d-4558-973b-41fb2a72eadb" name="Changes" comment="added format checker to Kafka and let messages through as is">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/dev/trackbench/system/kafka/KafkaTools/Accelerometer.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/dev/trackbench/system/kafka/KafkaTools/Accelerometer.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/dev/trackbench/system/kafka/KafkaTools/Brake.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/dev/trackbench/system/kafka/KafkaTools/Brake.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/dev/trackbench/system/kafka/KafkaTools/Engine.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/dev/trackbench/system/kafka/KafkaTools/Engine.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/dev/trackbench/system/kafka/KafkaTools/FuelPump.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/dev/trackbench/system/kafka/KafkaTools/FuelPump.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/dev/trackbench/system/kafka/KafkaTools/Heat.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/dev/trackbench/system/kafka/KafkaTools/Heat.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/dev/trackbench/system/kafka/KafkaTools/Speed.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/dev/trackbench/system/kafka/KafkaTools/Speed.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/dev/trackbench/system/kafka/KafkaTools/Tire.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/dev/trackbench/system/kafka/KafkaTools/Tire.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/dev/trackbench/system/kafka/KafkaTools/TypeSplitter.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/dev/trackbench/system/kafka/KafkaTools/TypeSplitter.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/dev/trackbench/system/kafka/Serde/AverageAccelerometerGroupSerde.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/dev/trackbench/system/kafka/Serde/AverageAccelerometerGroupSerde.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -83,12 +91,15 @@
     &quot;assignee&quot;: &quot;datomo&quot;
   }
 }</component>
-  <component name="GithubPullRequestsUISettings"><![CDATA[{
-  "selectedUrlAndAccountId": {
-    "url": "https://github.com/data-tracks/TrackBench.git",
-    "accountId": "656552ee-c05f-441f-8b43-02e68d14bcc6"
-  }
-}]]></component>
+  <component name="GithubDefaultAccount">
+    <option name="defaultAccountId" value="656552ee-c05f-441f-8b43-02e68d14bcc6" />
+  </component>
+  <component name="GithubPullRequestsUISettings">{
+  &quot;selectedUrlAndAccountId&quot;: {
+    &quot;url&quot;: &quot;https://github.com/data-tracks/TrackBench.git&quot;,
+    &quot;accountId&quot;: &quot;656552ee-c05f-441f-8b43-02e68d14bcc6&quot;
+  }
+}</component>
   <component name="ProblemsViewState">
     <option name="selectedTabId" value="CurrentFile" />
   </component>
@@ -103,28 +114,28 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "Gradle.benchmark [:dev.datageneration.Main.main()].executor": "Run",
-    "Gradle.benchmark [build].executor": "Run",
-    "Gradle.benchmark [run].executor": "Run",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "RunOnceActivity.git.unshallow": "true",
-    "git-widget-placeholder": "main",
-    "kotlin-language-version-configured": "true",
-    "last_opened_file_path": "C:/Users/danie/git/TrackBench/benchmark",
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "nodejs_package_manager_path": "npm",
-    "project.structure.last.edited": "Modules",
-    "project.structure.proportion": "0.15",
-    "project.structure.side.proportion": "0.0",
-    "settings.editor.selected.configurable": "reference.settingsdialog.project.gradle",
-    "vue.rearranger.settings.migration": "true"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;Gradle.benchmark [:dev.datageneration.Main.main()].executor&quot;: &quot;Run&quot;,
+    &quot;Gradle.benchmark [build].executor&quot;: &quot;Run&quot;,
+    &quot;Gradle.benchmark [run].executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
+    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
+    &quot;last_opened_file_path&quot;: &quot;C:/Users/danie/git/TrackBench/benchmark&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
+    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,
+    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
+    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;vcs.Git&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   }
-}]]></component>
+}</component>
   <component name="RecentsManager">
     <key name="MoveMembersDialog.RECENTS_KEY">
       <recent name="dev.trackbench.util.TimeUtils" />
@@ -228,7 +239,8 @@
       <workItem from="1738019105581" duration="95000" />
       <workItem from="1738077020355" duration="10008000" />
       <workItem from="1738087119532" duration="22200000" />
-      <workItem from="1738254872096" duration="799000" />
+      <workItem from="1738254872096" duration="7138000" />
+      <workItem from="1738500267797" duration="4043000" />
     </task>
     <task id="LOCAL-00001" summary="moved to gradle, changed sensor design">
       <option name="closed" value="true" />
@@ -286,7 +298,15 @@
       <option name="project" value="LOCAL" />
       <updated>1738185178363</updated>
     </task>
-    <option name="localTasksCounter" value="8" />
+    <task id="LOCAL-00008" summary="added format checker to Kafka and let messages through as is">
+      <option name="closed" value="true" />
+      <created>1738255747376</created>
+      <option name="number" value="00008" />
+      <option name="presentableId" value="LOCAL-00008" />
+      <option name="project" value="LOCAL" />
+      <updated>1738255747376</updated>
+    </task>
+    <option name="localTasksCounter" value="9" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -310,7 +330,8 @@
     <MESSAGE value="removed incorrectly tracked files" />
     <MESSAGE value="added delay calculator" />
     <MESSAGE value="added logic for defining fixed workloads and evaluation of results" />
-    <option name="LAST_COMMIT_MESSAGE" value="added logic for defining fixed workloads and evaluation of results" />
+    <MESSAGE value="added format checker to Kafka and let messages through as is" />
+    <option name="LAST_COMMIT_MESSAGE" value="added format checker to Kafka and let messages through as is" />
   </component>
   <component name="XDebuggerManager">
     <breakpoint-manager>
Index: src/main/java/dev/trackbench/system/kafka/KafkaTools/Engine.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dev.trackbench.system.kafka.KafkaTools;\r\n\r\n\r\nimport dev.trackbench.system.kafka.AverageClass.AverageEngine;\r\nimport dev.trackbench.system.kafka.JsonClass.JsonEngine;\r\nimport dev.trackbench.system.kafka.Serde.AverageEngineSerde;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\r\nimport org.apache.kafka.clients.producer.KafkaProducer;\r\nimport org.apache.kafka.clients.producer.Producer;\r\nimport org.apache.kafka.clients.producer.ProducerRecord;\r\nimport org.apache.kafka.common.serialization.Serdes;\r\nimport org.apache.kafka.streams.KafkaStreams;\r\nimport org.apache.kafka.streams.StreamsBuilder;\r\nimport org.apache.kafka.streams.StreamsConfig;\r\nimport org.apache.kafka.streams.kstream.*;\r\nimport org.json.JSONObject;\r\n\r\nimport java.time.Duration;\r\nimport java.util.Properties;\r\n\r\n@Slf4j\r\npublic class Engine {\r\n\r\n    static Properties props = new Properties();\r\n    static Properties producerProps = new Properties();\r\n    static Producer<String, String> producer;\r\n    static long windowSize = 1000;\r\n    static long advanceBy = 250;\r\n\r\n    public static void getProps(Properties props) {\r\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\r\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\r\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\r\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"latest\");\r\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG,0);\r\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, StreamsConfig.EXACTLY_ONCE); // Ensure exactly-once semantics\r\n//        props.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, 8);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"engine-app\");\r\n        getProps(props);\r\n\r\n        // Configure producer\r\n        producerProps.put(\"bootstrap.servers\", \"localhost:9092\");\r\n        producerProps.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\r\n        producerProps.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\r\n        producerProps.put(\"acks\", \"all\");  // Ensure that all replicas acknowledge the message\r\n        producerProps.put(\"retries\", 3);   // Retry on failure\r\n        producerProps.put(\"enable.idempotence\", \"true\");\r\n\r\n\r\n        // Initialize the producer once\r\n        producer = new KafkaProducer<>(producerProps);\r\n\r\n        try {\r\n            StreamsBuilder builder = new StreamsBuilder();\r\n            String inputTopic = \"engine\";\r\n            String outputTopic = \"f3\";\r\n            KStream<String, String> sensorStream = builder.stream(inputTopic);\r\n\r\n//            sensorStream.foreach((key, value) -> {\r\n//                log.info(\"Key: \" + key + \" Value: \" + value);\r\n//            });\r\n\r\n            KTable<Windowed<String>, AverageEngine> aggregatedStream = sensorStream\r\n                    .groupBy((key, value) -> {\r\n//                        log.info(\"Key :\" + key + \" Value :\" + value);\r\n                        return key;\r\n                    })\r\n                    .windowedBy(TimeWindows.of(Duration.ofMillis(windowSize)).grace(Duration.ofMillis(0)).advanceBy(Duration.ofMillis(advanceBy)))\r\n                    .aggregate(() -> new AverageEngine(0, 0, 0, 0, 0, 0, 0, 0, 0, -1), (key, value, agg) -> {\r\n                        JsonEngine entry = new JsonEngine(value);\r\n                        if(!entry.error) {\r\n                            agg.count += 1;\r\n                            agg.temp += entry.temp;\r\n                            agg.rpm += entry.rpm;\r\n                            agg.fuelFlow += entry.fuelFlow;\r\n                            agg.oilPressure += entry.oilPressure;\r\n                            agg.fuelPressure += entry.fuelPressure;\r\n                            agg.exhaust += entry.exhaust;\r\n                            if(agg.tickEnd < entry.tick) {\r\n                                agg.tickEnd = entry.tick;\r\n                            }\r\n                            if(agg.id == -1) {\r\n                                agg.id = entry.id;\r\n                                agg.tickStart = entry.tick;\r\n                            }\r\n                        }\r\n                        return agg;\r\n                    }, Materialized.with(Serdes.String(), new AverageEngineSerde()))\r\n                    ;//.suppress(Suppressed.untilWindowCloses(Suppressed.BufferConfig.unbounded()));\r\n\r\n            aggregatedStream\r\n                    .toStream()\r\n//                    .filter((key, value) -> {\r\n//                        long windowEnd = key.window().end();\r\n//                        return value.getTickEnd() >= windowEnd;\r\n//                    })\r\n                    .foreach((key, value) -> {\r\n\r\n                        double[] average = value.getAverage();\r\n\r\n//                        String message = \"AverageTire Temp: \" + average[0] + \" AverageTire Pressure: \" + average[1] + \" Count: \" + value.getCount();\r\n                        JSONObject data = new JSONObject();\r\n                        data.put(\"averageTemp\", average[0]);\r\n                        data.put(\"averageRPM\", average[1]);\r\n                        data.put(\"averageFuelFlow\", average[2]);\r\n                        data.put(\"averageOilPressure\", average[3]);\r\n                        data.put(\"averageFuelPressure\", average[4]);\r\n                        data.put(\"averageExhaust\", average[5]);\r\n                        data.put(\"id\", value.getId());\r\n                        data.put(\"type\", \"engine\");\r\n\r\n                        JSONObject json = new JSONObject();\r\n                        json.put(\"startTime\", value.getTickStart());\r\n                        json.put(\"endTime\", value.getTickEnd());\r\n                        json.put(\"data\", data);\r\n\r\n                        String jsonMessage = json.toString();\r\n\r\n                        log.info(\"Message: \" + jsonMessage);\r\n                        producer.send(new ProducerRecord<>(outputTopic, \"0\", jsonMessage), (metadata, exception) -> {\r\n                            if (exception != null) {\r\n                                System.err.println(\"Failed to send message: \" + exception.getMessage());\r\n                                // Optionally, handle the failure (e.g., retry logic)\r\n                            }\r\n//                            else {\r\n//                                log.info(\"Message sent to topic \" + outputTopic + \": AverageTire Temp\" + average[0] + \" AverageTire Pressure\" + average[1]);\r\n//                            }\r\n                        });\r\n                    });\r\n\r\n            // Start the Kafka Streams application\r\n            KafkaStreams streams = new KafkaStreams(builder.build(), props);\r\n            streams.cleanUp();\r\n            streams.start();\r\n\r\n            // Graceful shutdown\r\n            Runtime.getRuntime().addShutdownHook(new Thread(() -> {\r\n                try{\r\n                    producer.flush();\r\n                    streams.close();\r\n                } finally {\r\n                    log.info(\"Shutting down\");\r\n                }\r\n            }));\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/trackbench/system/kafka/KafkaTools/Engine.java b/src/main/java/dev/trackbench/system/kafka/KafkaTools/Engine.java
--- a/src/main/java/dev/trackbench/system/kafka/KafkaTools/Engine.java	(revision e837cb2bec2706ceed7f21baacecc6a7aefc9f12)
+++ b/src/main/java/dev/trackbench/system/kafka/KafkaTools/Engine.java	(date 1738256703752)
@@ -57,7 +57,7 @@
         try {
             StreamsBuilder builder = new StreamsBuilder();
             String inputTopic = "engine";
-            String outputTopic = "f3";
+            String outputTopic = "output";
             KStream<String, String> sensorStream = builder.stream(inputTopic);
 
 //            sensorStream.foreach((key, value) -> {
Index: src/main/java/dev/trackbench/system/kafka/KafkaTools/Speed.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dev.trackbench.system.kafka.KafkaTools;\r\n\r\nimport dev.trackbench.system.kafka.AverageClass.AverageSpeed;\r\nimport dev.trackbench.system.kafka.JsonClass.JsonSpeed;\r\nimport dev.trackbench.system.kafka.Serde.AverageSpeedSerde;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\r\nimport org.apache.kafka.clients.producer.KafkaProducer;\r\nimport org.apache.kafka.clients.producer.Producer;\r\nimport org.apache.kafka.clients.producer.ProducerRecord;\r\nimport org.apache.kafka.common.serialization.Serdes;\r\nimport org.apache.kafka.streams.KafkaStreams;\r\nimport org.apache.kafka.streams.StreamsBuilder;\r\nimport org.apache.kafka.streams.StreamsConfig;\r\nimport org.apache.kafka.streams.kstream.*;\r\nimport org.json.JSONObject;\r\n\r\nimport java.time.Duration;\r\nimport java.util.Properties;\r\n\r\n@Slf4j\r\npublic class Speed {\r\n\r\n    static Properties props = new Properties();\r\n    static Properties producerProps = new Properties();\r\n    static Producer<String, String> producer;\r\n    static long windowSize = 1000;\r\n    static long advanceBy = 250;\r\n\r\n    public static void getProps(Properties props) {\r\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\r\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\r\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\r\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"latest\");\r\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\r\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, StreamsConfig.EXACTLY_ONCE); // Ensure exactly-once semantics\r\n//        props.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, 4);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"speed-app\");\r\n        getProps(props);\r\n\r\n        // Configure producer\r\n        producerProps.put(\"bootstrap.servers\", \"localhost:9092\");\r\n        producerProps.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\r\n        producerProps.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\r\n        producerProps.put(\"acks\", \"all\");  // Ensure that all replicas acknowledge the message\r\n        producerProps.put(\"retries\", 3);   // Retry on failure\r\n        producerProps.put(\"enable.idempotence\", \"true\");\r\n\r\n\r\n        // Initialize the producer once\r\n        producer = new KafkaProducer<>(producerProps);\r\n\r\n        try {\r\n            StreamsBuilder builder = new StreamsBuilder();\r\n            String inputTopic = \"speed\";\r\n            String outputTopic = \"f3\";\r\n            KStream<String, String> sensorStream = builder.stream(inputTopic);\r\n\r\n//            sensorStream.foreach((key, value) -> {\r\n//                log.info(\"Key: \" + key + \" Value: \" + value);\r\n//            });\r\n\r\n            KTable<Windowed<String>, AverageSpeed> aggregatedStream = sensorStream\r\n                    .groupBy((key, value) -> {\r\n//                        log.info(\"Key :\" + key + \" Value :\" + value);\r\n                        return key;\r\n                    })\r\n                    .windowedBy(TimeWindows.of(Duration.ofMillis(windowSize)).grace(Duration.ofMillis(0)).advanceBy(Duration.ofMillis(advanceBy)))\r\n                    .aggregate(() -> new AverageSpeed(0, 0, 0, 0, 0, -1), (key, value, agg) -> {\r\n                        JsonSpeed entry = new JsonSpeed(value);\r\n                        if(!entry.error) {\r\n                            agg.count += 1;\r\n                            agg.speed += entry.speed;\r\n                            agg.wind += entry.wind;\r\n                            if(agg.tickEnd < entry.tick) {\r\n                                agg.tickEnd = entry.tick;\r\n                            }\r\n                            if(agg.id == -1) {\r\n                                agg.id = entry.id;\r\n                                agg.tickStart = entry.tick;\r\n                            }\r\n                        }\r\n                        return agg;\r\n                    }, Materialized.with(Serdes.String(), new AverageSpeedSerde()))\r\n                    ;//.suppress(Suppressed.untilWindowCloses(Suppressed.BufferConfig.unbounded()));\r\n\r\n            aggregatedStream\r\n                    .toStream()\r\n//                    .filter((key, value) -> {\r\n//                        long windowEnd = key.window().end();\r\n//                        return value.getTickEnd() >= windowEnd;\r\n//                    })\r\n                    .foreach((key, value) -> {\r\n\r\n                        double[] average = value.getAverage();\r\n\r\n//                        String message = \"AverageTire Temp: \" + average[0] + \" AverageTire Pressure: \" + average[1] + \" Count: \" + value.getCount();\r\n                        JSONObject data = new JSONObject();\r\n                        data.put(\"averageSpeed kph\", average[0]);\r\n                        data.put(\"averageSpeed mph\", (average[0] / 1.609344));\r\n                        data.put(\"averageWindSpeed\", average[1]);\r\n                        data.put(\"id\", value.getId());\r\n                        data.put(\"type\", \"speed\");\r\n\r\n                        JSONObject json = new JSONObject();\r\n                        json.put(\"startTime\", value.getTickStart());\r\n                        json.put(\"endTime\", value.getTickEnd());\r\n                        json.put(\"data\", data);\r\n\r\n                        String jsonMessage = json.toString();\r\n\r\n                        log.info(\"Message: \" + jsonMessage);\r\n                        producer.send(new ProducerRecord<>(outputTopic, \"0\", jsonMessage), (metadata, exception) -> {\r\n                            if (exception != null) {\r\n                                System.err.println(\"Failed to send message: \" + exception.getMessage());\r\n                                // Optionally, handle the failure (e.g., retry logic)\r\n                            }\r\n//                            else {\r\n//                                log.info(\"Message sent to topic \" + outputTopic + \": AverageTire Temp\" + average[0] + \" AverageTire Pressure\" + average[1]);\r\n//                            }\r\n                        });\r\n                    });\r\n\r\n            // Start the Kafka Streams application\r\n            KafkaStreams streams = new KafkaStreams(builder.build(), props);\r\n            streams.cleanUp();\r\n            streams.start();\r\n\r\n            // Graceful shutdown\r\n            Runtime.getRuntime().addShutdownHook(new Thread(() -> {\r\n            try{\r\n                producer.flush();\r\n                streams.close();\r\n            } finally {\r\n                log.info(\"Shutting down\");\r\n            }\r\n            }));\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/trackbench/system/kafka/KafkaTools/Speed.java b/src/main/java/dev/trackbench/system/kafka/KafkaTools/Speed.java
--- a/src/main/java/dev/trackbench/system/kafka/KafkaTools/Speed.java	(revision e837cb2bec2706ceed7f21baacecc6a7aefc9f12)
+++ b/src/main/java/dev/trackbench/system/kafka/KafkaTools/Speed.java	(date 1738256703758)
@@ -56,7 +56,7 @@
         try {
             StreamsBuilder builder = new StreamsBuilder();
             String inputTopic = "speed";
-            String outputTopic = "f3";
+            String outputTopic = "output";
             KStream<String, String> sensorStream = builder.stream(inputTopic);
 
 //            sensorStream.foreach((key, value) -> {
Index: src/main/java/dev/trackbench/system/kafka/KafkaTools/Brake.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dev.trackbench.system.kafka.KafkaTools;\r\n\r\n\r\nimport dev.trackbench.system.kafka.AverageClass.AverageBrake;\r\nimport dev.trackbench.system.kafka.JsonClass.JsonBrake;\r\nimport dev.trackbench.system.kafka.Serde.AverageBrakeSerde;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\r\nimport org.apache.kafka.clients.producer.KafkaProducer;\r\nimport org.apache.kafka.clients.producer.Producer;\r\nimport org.apache.kafka.clients.producer.ProducerRecord;\r\nimport org.apache.kafka.common.serialization.Serdes;\r\nimport org.apache.kafka.streams.KafkaStreams;\r\nimport org.apache.kafka.streams.StreamsBuilder;\r\nimport org.apache.kafka.streams.StreamsConfig;\r\nimport org.apache.kafka.streams.kstream.*;\r\nimport org.json.JSONObject;\r\n\r\nimport java.time.Duration;\r\nimport java.util.Properties;\r\n\r\n@Slf4j\r\npublic class Brake {\r\n\r\n    static Properties props = new Properties();\r\n    static Properties producerProps = new Properties();\r\n    static Producer<String, String> producer;\r\n    static long windowSize = 1000;\r\n    static long advanceBy = 250;\r\n\r\n    public static void getProps(Properties props) {\r\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\r\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\r\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\r\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"latest\");\r\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\r\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, StreamsConfig.EXACTLY_ONCE); // Ensure exactly-once semantics\r\n//        props.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, 4);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"brake-app\");\r\n        getProps(props);\r\n\r\n        // Configure producer\r\n        producerProps.put(\"bootstrap.servers\", \"localhost:9092\");\r\n        producerProps.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\r\n        producerProps.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\r\n        producerProps.put(\"acks\", \"all\");  // Ensure that all replicas acknowledge the message\r\n        producerProps.put(\"retries\", 3);   // Retry on failure\r\n        producerProps.put(\"enable.idempotence\", \"true\");\r\n\r\n\r\n        // Initialize the producer once\r\n        producer = new KafkaProducer<>(producerProps);\r\n\r\n        try {\r\n            StreamsBuilder builder = new StreamsBuilder();\r\n            String inputTopic = \"brake\";\r\n            String outputTopic = \"f3\";\r\n            KStream<String, String> sensorStream = builder.stream(inputTopic);\r\n\r\n//            sensorStream.foreach((key, value) -> {\r\n//                log.info(\"Key: \" + key + \" Value: \" + value);\r\n//            });\r\n\r\n            KTable<Windowed<String>, AverageBrake> aggregatedStream = sensorStream\r\n                    .groupBy((key, value) -> {\r\n//                        log.info(\"Key :\" + key + \" Value :\" + value);\r\n                        return key;\r\n                    })\r\n                    .windowedBy(TimeWindows.of(Duration.ofMillis(windowSize)).grace(Duration.ofMillis(0)).advanceBy(Duration.ofMillis(advanceBy)))\r\n                    .aggregate(() -> new AverageBrake(0, 0, 0, 0, 0, -1, 0), (key, value, agg) -> {\r\n                        JsonBrake entry = new JsonBrake(value);\r\n                        if(!entry.error) {\r\n                            agg.count += 1;\r\n                            agg.temp += entry.temp;\r\n                            agg.pressure += entry.pressure;\r\n                            agg.wear += entry.wear;\r\n                            if(agg.tickEnd < entry.tick) {\r\n                                agg.tickEnd = entry.tick;\r\n                            }\r\n                            if(agg.id == -1) {\r\n                                agg.id = entry.id;\r\n                                agg.tickStart = entry.tick;\r\n                            }\r\n                        }\r\n                        return agg;\r\n                    }, Materialized.with(Serdes.String(), new AverageBrakeSerde()))\r\n                    ;//.suppress(Suppressed.untilWindowCloses(Suppressed.BufferConfig.unbounded()));\r\n\r\n            aggregatedStream\r\n                    .toStream()\r\n//                    .filter((key, value) -> {\r\n//                        long windowEnd = key.window().end();\r\n//                        return value.getTickEnd() >= windowEnd;\r\n//                    })\r\n                    .foreach((key, value) -> {\r\n\r\n                        double[] average = value.getAverage();\r\n\r\n//                        String message = \"AverageTire Temp: \" + average[0] + \" AverageTire Pressure: \" + average[1] + \" Count: \" + value.getCount();\r\n                        JSONObject data = new JSONObject();\r\n                        data.put(\"averageTemp\", average[0]);\r\n                        data.put(\"averagePressure\", average[1]);\r\n                        data.put(\"averageWear\", average[2]);\r\n                        data.put(\"id\", value.getId());\r\n                        data.put(\"type\", \"brake\");\r\n\r\n                        JSONObject json = new JSONObject();\r\n                        json.put(\"startTime\", value.getTickStart());\r\n                        json.put(\"endTime\", value.getTickEnd());\r\n                        json.put(\"data\", data);\r\n\r\n                        String jsonMessage = json.toString();\r\n\r\n                        log.info(\"Message: \" + jsonMessage);\r\n                        producer.send(new ProducerRecord<>(outputTopic, \"0\", jsonMessage), (metadata, exception) -> {\r\n                            if (exception != null) {\r\n                                System.err.println(\"Failed to send message: \" + exception.getMessage());\r\n                                // Optionally, handle the failure (e.g., retry logic)\r\n                            }\r\n//                            else {\r\n//                                log.info(\"Message sent to topic \" + outputTopic + \": AverageTire Temp\" + average[0] + \" AverageTire Pressure\" + average[1]);\r\n//                            }\r\n                        });\r\n                    });\r\n\r\n            // Start the Kafka Streams application\r\n            KafkaStreams streams = new KafkaStreams(builder.build(), props);\r\n            streams.cleanUp();\r\n            streams.start();\r\n\r\n            // Graceful shutdown\r\n            Runtime.getRuntime().addShutdownHook(new Thread(() -> {\r\n            try{\r\n                producer.flush();\r\n                streams.close();\r\n            } finally {\r\n                log.info(\"Shutting down\");\r\n            }\r\n            }));\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/trackbench/system/kafka/KafkaTools/Brake.java b/src/main/java/dev/trackbench/system/kafka/KafkaTools/Brake.java
--- a/src/main/java/dev/trackbench/system/kafka/KafkaTools/Brake.java	(revision e837cb2bec2706ceed7f21baacecc6a7aefc9f12)
+++ b/src/main/java/dev/trackbench/system/kafka/KafkaTools/Brake.java	(date 1738256703741)
@@ -57,7 +57,7 @@
         try {
             StreamsBuilder builder = new StreamsBuilder();
             String inputTopic = "brake";
-            String outputTopic = "f3";
+            String outputTopic = "output";
             KStream<String, String> sensorStream = builder.stream(inputTopic);
 
 //            sensorStream.foreach((key, value) -> {
Index: src/main/java/dev/trackbench/system/kafka/KafkaTools/Tire.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dev.trackbench.system.kafka.KafkaTools;\r\n\r\n\r\nimport dev.trackbench.system.kafka.AverageClass.AverageTire;\r\nimport dev.trackbench.system.kafka.JsonClass.JsonTire;\r\nimport dev.trackbench.system.kafka.Serde.AverageTireSerde;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\r\nimport org.apache.kafka.clients.producer.KafkaProducer;\r\nimport org.apache.kafka.clients.producer.Producer;\r\nimport org.apache.kafka.clients.producer.ProducerRecord;\r\nimport org.apache.kafka.common.serialization.Serdes;\r\nimport org.apache.kafka.streams.KafkaStreams;\r\nimport org.apache.kafka.streams.StreamsBuilder;\r\nimport org.apache.kafka.streams.StreamsConfig;\r\nimport org.apache.kafka.streams.kstream.*;\r\nimport org.json.JSONObject;\r\n\r\nimport java.time.Duration;\r\nimport java.util.Properties;\r\n\r\n@Slf4j\r\npublic class Tire {\r\n\r\n    static Properties props = new Properties();\r\n    static Properties producerProps = new Properties();\r\n    static Producer<String, String> producer;\r\n    static long windowSize = 1000;\r\n    static long advanceBy = 250;\r\n\r\n    public static void getProps(Properties props) {\r\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\r\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\r\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\r\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"latest\");\r\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\r\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, StreamsConfig.EXACTLY_ONCE); // Ensure exactly-once semantics\r\n//        props.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, 4);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"tire-app\");\r\n        getProps(props);\r\n\r\n        // Configure producer\r\n        producerProps.put(\"bootstrap.servers\", \"localhost:9092\");\r\n        producerProps.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\r\n        producerProps.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\r\n        producerProps.put(\"acks\", \"all\");  // Ensure that all replicas acknowledge the message\r\n        producerProps.put(\"retries\", 3);   // Retry on failure\r\n        producerProps.put(\"enable.idempotence\", \"true\");\r\n\r\n\r\n        // Initialize the producer once\r\n        producer = new KafkaProducer<>(producerProps);\r\n\r\n        try {\r\n            StreamsBuilder builder = new StreamsBuilder();\r\n            String inputTopic = \"tire\";\r\n            String outputTopic = \"f3\";\r\n            KStream<String, String> sensorStream = builder.stream(inputTopic);\r\n\r\n//            sensorStream.foreach((key, value) -> {\r\n//                log.info(\"Key: \" + key + \" Value: \" + value);\r\n//            });\r\n\r\n            KTable<Windowed<String>, AverageTire> aggregatedStream = sensorStream\r\n                    .groupBy((key, value) -> {\r\n//                        log.info(\"Key :\" + key + \" Value :\" + value);\r\n                        return key;\r\n                    })\r\n                    .windowedBy(TimeWindows.of(Duration.ofMillis(windowSize)).grace(Duration.ofMillis(0)).advanceBy(Duration.ofMillis(advanceBy)))\r\n                    .aggregate(() -> new AverageTire(0, 0, 0, 0, 0, -1, 0, 0), (key, value, agg) -> {\r\n                        JsonTire entry = new JsonTire(value);\r\n                        if(!entry.error) {\r\n                            agg.count += 1;\r\n                            agg.temp += entry.temp;\r\n                            agg.pressure += entry.pressure;\r\n                            agg.wear += entry.wear;\r\n                            if(agg.tickEnd < entry.tick) {\r\n                                agg.tickEnd = entry.tick;\r\n                            }\r\n                            if(agg.id == -1) {\r\n                                agg.id = entry.id;\r\n                                agg.position = entry.position;\r\n                                agg.tickStart = entry.tick;\r\n                            }\r\n                        }\r\n                        return agg;\r\n                    }, Materialized.with(Serdes.String(), new AverageTireSerde()))\r\n                    ;//.suppress(Suppressed.untilWindowCloses(Suppressed.BufferConfig.unbounded()));\r\n\r\n            aggregatedStream\r\n                    .toStream()\r\n//                    .filter((key, value) -> {\r\n//                        long windowEnd = key.window().end();\r\n//                        return value.getTickEnd() >= windowEnd;\r\n//                    })\r\n                    .foreach((key, value) -> {\r\n\r\n                        double[] average = value.getAverage();\r\n\r\n//                        String message = \"AverageTire Temp: \" + average[0] + \" AverageTire Pressure: \" + average[1] + \" Count: \" + value.getCount();\r\n                        JSONObject data = new JSONObject();\r\n                        data.put(\"averageTemp\", average[0]);\r\n                        data.put(\"averagePressure\", average[1]);\r\n                        data.put(\"averageWear\", average[2]);\r\n                        data.put(\"id\", value.getId());\r\n                        data.put(\"position\", value.getPosition());\r\n                        data.put(\"type\", \"tire\");\r\n\r\n                        JSONObject json = new JSONObject();\r\n                        json.put(\"startTime\", value.getTickStart());\r\n                        json.put(\"endTime\", value.getTickEnd());\r\n                        json.put(\"data\", data);\r\n\r\n                        String jsonMessage = json.toString();\r\n\r\n                        log.info(\"Message: \" + jsonMessage);\r\n                        producer.send(new ProducerRecord<>(outputTopic, \"0\", jsonMessage), (metadata, exception) -> {\r\n                            if (exception != null) {\r\n                                System.err.println(\"Failed to send message: \" + exception.getMessage());\r\n                                // Optionally, handle the failure (e.g., retry logic)\r\n                            }\r\n//                            else {\r\n//                                log.info(\"Message sent to topic \" + outputTopic + \": AverageTire Temp\" + average[0] + \" AverageTire Pressure\" + average[1]);\r\n//                            }\r\n                        });\r\n                    });\r\n\r\n            // Start the Kafka Streams application\r\n            KafkaStreams streams = new KafkaStreams(builder.build(), props);\r\n            streams.cleanUp();\r\n            streams.start();\r\n\r\n            // Graceful shutdown\r\n            Runtime.getRuntime().addShutdownHook(new Thread(() -> {\r\n            try{\r\n                producer.flush();\r\n                streams.close();\r\n            } finally {\r\n                log.info(\"Shutting down\");\r\n            }\r\n            }));\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/trackbench/system/kafka/KafkaTools/Tire.java b/src/main/java/dev/trackbench/system/kafka/KafkaTools/Tire.java
--- a/src/main/java/dev/trackbench/system/kafka/KafkaTools/Tire.java	(revision e837cb2bec2706ceed7f21baacecc6a7aefc9f12)
+++ b/src/main/java/dev/trackbench/system/kafka/KafkaTools/Tire.java	(date 1738256703773)
@@ -57,7 +57,7 @@
         try {
             StreamsBuilder builder = new StreamsBuilder();
             String inputTopic = "tire";
-            String outputTopic = "f3";
+            String outputTopic = "output";
             KStream<String, String> sensorStream = builder.stream(inputTopic);
 
 //            sensorStream.foreach((key, value) -> {
Index: src/main/java/dev/trackbench/system/kafka/KafkaTools/Accelerometer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dev.trackbench.system.kafka.KafkaTools;\r\n\r\n\r\nimport dev.trackbench.system.kafka.AverageClass.AverageAccelerometer;\r\nimport dev.trackbench.system.kafka.JsonClass.JsonAccelerometer;\r\nimport dev.trackbench.system.kafka.Serde.AverageAccelerometerSerde;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\r\nimport org.apache.kafka.clients.producer.KafkaProducer;\r\nimport org.apache.kafka.clients.producer.Producer;\r\nimport org.apache.kafka.clients.producer.ProducerRecord;\r\nimport org.apache.kafka.common.serialization.Serdes;\r\nimport org.apache.kafka.streams.KafkaStreams;\r\nimport org.apache.kafka.streams.StreamsBuilder;\r\nimport org.apache.kafka.streams.StreamsConfig;\r\nimport org.apache.kafka.streams.kstream.*;\r\nimport org.json.JSONObject;\r\n\r\nimport java.time.Duration;\r\nimport java.util.Properties;\r\n\r\n@Slf4j\r\npublic class Accelerometer {\r\n\r\n    static Properties props = new Properties();\r\n    static Properties producerProps = new Properties();\r\n    static Producer<String, String> producer;\r\n    static long windowSize = 1000;\r\n    static long advanceBy = 250;\r\n\r\n    public static void getProps(Properties props) {\r\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\r\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\r\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\r\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"latest\");\r\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\r\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, StreamsConfig.EXACTLY_ONCE); // Ensure exactly-once semantics\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"accelerometer-app\");\r\n        getProps(props);\r\n\r\n        // Configure producer\r\n        producerProps.put(\"bootstrap.servers\", \"localhost:9092\");\r\n        producerProps.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\r\n        producerProps.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\r\n        producerProps.put(\"acks\", \"all\");  // Ensure that all replicas acknowledge the message\r\n        producerProps.put(\"retries\", 3);   // Retry on failure\r\n        producerProps.put(\"enable.idempotence\", \"true\");\r\n\r\n\r\n        // Initialize the producer once\r\n        producer = new KafkaProducer<>(producerProps);\r\n\r\n        try {\r\n            StreamsBuilder builder = new StreamsBuilder();\r\n            String inputTopic = \"accelerometer\";\r\n            String outputTopic = \"f3\";\r\n            KStream<String, String> sensorStream = builder.stream(inputTopic);\r\n\r\n            KTable<Windowed<String>, AverageAccelerometer> aggregatedStream = sensorStream\r\n                    .groupBy((key, value) -> {\r\n//                        log.info(\"Key :\" + key + \" Value :\" + value);\r\n                        return key;\r\n                    })\r\n                    .windowedBy(TimeWindows.of(Duration.ofMillis(windowSize)).grace(Duration.ofMillis(0)).advanceBy(Duration.ofMillis(advanceBy)))\r\n                    .aggregate(() -> new AverageAccelerometer(0, 0, 0, 0, -1), (key, value, agg) -> {\r\n                        JsonAccelerometer entry = new JsonAccelerometer(value);\r\n                        if(!entry.error) {\r\n                            agg.count += 1;\r\n                            agg.throttle += entry.throttle;\r\n                            if(agg.tickEnd < entry.tick) {\r\n                                agg.tickEnd = entry.tick;\r\n                            }\r\n                            if(agg.id == -1) {\r\n                                agg.id = entry.id;\r\n                                agg.tickStart = entry.tick;\r\n                            }\r\n                        }\r\n                        return agg;\r\n                    }, Materialized.with(Serdes.String(), new AverageAccelerometerSerde()))\r\n                    ;\r\n\r\n            aggregatedStream\r\n                    .toStream()\r\n                    .foreach((key, value) -> {\r\n\r\n                        double average = value.getAverage();\r\n\r\n//                       String message = \"AverageTire Temp: \" + average[0] + \" AverageTire Pressure: \" + average[1] + \" Count: \" + value.getCount();\r\n                        JSONObject data = new JSONObject();\r\n                        data.put(\"averageThrottlepedall\", average);\r\n                        data.put(\"id\", value.getId());\r\n                        data.put(\"type\", \"accelerometer\");\r\n\r\n                        JSONObject json = new JSONObject();\r\n                        json.put(\"startTime\", value.getTickStart());\r\n                        json.put(\"endTime\", value.getTickEnd());\r\n                        json.put(\"data\", data);\r\n\r\n                        String jsonMessage = json.toString();\r\n\r\n                        log.info(\"Message: \" + jsonMessage);\r\n                        producer.send(new ProducerRecord<>(outputTopic, \"0\", jsonMessage), (metadata, exception) -> {\r\n                            if (exception != null) {\r\n                                System.err.println(\"Failed to send message: \" + exception.getMessage());\r\n                                // Optionally, handle the failure (e.g., retry logic)\r\n                            }\r\n//                            else {\r\n//                                log.info(\"Message sent to topic \" + outputTopic + \": AverageTire Temp\" + average[0] + \" AverageTire Pressure\" + average[1]);\r\n//                            }\r\n                        });\r\n                    });\r\n\r\n            // Start the Kafka Streams application\r\n            KafkaStreams streams = new KafkaStreams(builder.build(), props);\r\n            streams.cleanUp();\r\n            streams.start();\r\n\r\n            // Graceful shutdown\r\n            Runtime.getRuntime().addShutdownHook(new Thread(() -> {\r\n                try{\r\n                    producer.flush();\r\n                    streams.close();\r\n                } finally {\r\n                    log.info(\"Shutting down\");\r\n                }\r\n            }));\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/trackbench/system/kafka/KafkaTools/Accelerometer.java b/src/main/java/dev/trackbench/system/kafka/KafkaTools/Accelerometer.java
--- a/src/main/java/dev/trackbench/system/kafka/KafkaTools/Accelerometer.java	(revision e837cb2bec2706ceed7f21baacecc6a7aefc9f12)
+++ b/src/main/java/dev/trackbench/system/kafka/KafkaTools/Accelerometer.java	(date 1738256703748)
@@ -56,7 +56,7 @@
         try {
             StreamsBuilder builder = new StreamsBuilder();
             String inputTopic = "accelerometer";
-            String outputTopic = "f3";
+            String outputTopic = "output";
             KStream<String, String> sensorStream = builder.stream(inputTopic);
 
             KTable<Windowed<String>, AverageAccelerometer> aggregatedStream = sensorStream
